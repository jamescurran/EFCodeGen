@using System
@using System.Collections.Generic
@using System.Linq
@using MyMeta
@model EFCodeGen.Gui.Generator.TableModel
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

@{
	var hasdate = Model.Table.Columns.Any(c => c.Name == "AsOfDate") ? ": IHasAsOfDate" : String.Empty;
	var collectionName = Model.ToPascalCase(Model.Table.Name);
	var objectName = Model.DePluralize(collectionName);
}

//	Add the following line (uncommented) to your DbContext class:
//	public DbSet<@objectName> @collectionName {get; set;}


namespace @(Model.Namespace).Entities
{
	[Table("@Model.Table.DelimitedName")]
	public partial class @objectName @hasdate
	{
	@{int order = 0; }
	@foreach (MyMeta.Column col in Model.Table.Columns)
	{
		var parts = new List<string>();
		var columnParts = new List<string>();
		var comment = new List<string>();

		var dataTypeName = Model.GetDataType(col.DataTypeName);

		if (col.Name != null)
		{
			columnParts.Add('"' + col.Name + '"');
		}
		if (col.IsInPrimaryKey)
		{
			parts.Add("Key");
			if (Model.Table.PrimaryKeys.Count > 1)
			{
				++order;
				columnParts.Add("Order = " + order);
			}
		}
		else    if (!col.IsNullable)
		{
			parts.Add("Required");
		}
		else if (dataTypeName != "string")
		{
			dataTypeName += '?';
		}

		if (dataTypeName == "string" && col.CharacterMaxLength >0)      // dates also have CharacterMaxLength > 0
		{
			parts.Add(String.Format("MaxLength({0})", col.CharacterMaxLength));
		}
		comment.Add(String.Format("DbType=\"{0}\"", col.DataTypeNameComplete));
		if (columnParts.Any())
		{
			var parm = "Column(" + String.Join(", ", columnParts) + ")";
			parts.Add(parm);
		}
		if (parts.Any())
		{<text>		[@String.Join(", ", parts)]</text>}
		if (comment.Any())
		{<text>		// @String.Join(";  ", comment))</text>}
<text>
		public @dataTypeName	@Model.ToPascalCase(col.Name)	{get; set;}
</text>
	}
	
	@foreach (var fk in Model.Table.ForeignKeys)
	{
		if (Model.Table.Name == fk.PrimaryTable.Name) // one to many.
		{
			var collectionFK = Model.ToPascalCase(fk.ForeignTable.Name);
			var objectFK = Model.DePluralize(collectionFK);
		<text>[InverseProperty("@String.Join(", ",   fk.ForeignColumns.Select(c=>c.Name)  )")] </text>
		<text>public ICollection<@objectFK>		 @collectionFK {get; set;} 
			</text>

		}
		else                                              // many to one.
		{
			var collectionFK = Model.ToPascalCase(fk.PrimaryTable.Name);
			var objectFK = Model.DePluralize(collectionFK);
		<text>[ForeignKey("@String.Join(", ",   fk.ForeignColumns.Select(c=>c.Name)  )")] </text>
		<text>public @objectFK		 @objectFK {get; set;} 
		</text>			
		}

	}

	}
}

